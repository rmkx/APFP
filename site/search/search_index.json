{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Animated Profile Pictures A plugin for BetterDiscord.app Created by rmkx and p0rtL Components Github - Github Instructions. Discord - Server, installation, and requesting profile pictures. API - The web Api for building and handling database requests and updates. Bot - The Discord bot that handles requests and sends data to the Api. Website - The website for viewing and approving requests to be merged into the database. Links Github Discord Server Api ( Repo ) Bot ( Repo ) Notice This documentation is currently a work in progress. There can and will be errors and issues with the documentation, and things may be broken. Contact p0rtL#6592 on Discord, or open an issue on the repository for help.","title":"Home"},{"location":"#animated-profile-pictures","text":"","title":"Animated Profile Pictures"},{"location":"#a-plugin-for-betterdiscordapp","text":"Created by rmkx and p0rtL","title":"A plugin for BetterDiscord.app"},{"location":"#components","text":"Github - Github Instructions. Discord - Server, installation, and requesting profile pictures. API - The web Api for building and handling database requests and updates. Bot - The Discord bot that handles requests and sends data to the Api. Website - The website for viewing and approving requests to be merged into the database.","title":"Components"},{"location":"#links","text":"Github Discord Server Api ( Repo ) Bot ( Repo )","title":"Links"},{"location":"#notice","text":"This documentation is currently a work in progress. There can and will be errors and issues with the documentation, and things may be broken. Contact p0rtL#6592 on Discord, or open an issue on the repository for help.","title":"Notice"},{"location":"API/","text":"API Written in Node Js Basics - HTTP Requests Method Action GET Requests a representation of the specified resource POST Used to submit an entity to the specified resource Descriptions provided courtesy of MDN The User Object The user object is the main data that is being transferred in this Api, you will be using this a lot. The base object is formatted as shown in the following code block: {'userId':UserID, 'staticImage':IMG_Static, 'animatedImage':IMG_Playing} Note: There are certain endpoints that require a modified user object, but they will always contain these base items. Endpoints - Overview URL Description Params Type /AddUser Bot The endpoint used to create user entries into the database, these requests await approval before being commited. This endpoint is used by the Discord bot User Id, Static Image, Animated Image, Token POST /AddUserBTN Discord The endpoint used to create user entries into the database, these requests await approval before being commited. This endpoint is pending use in the settings menu of Discord. User Id, Static Image, Animated Image POST /EditUsers Website The endpoint used to approve and commit users to the database, this is triggered by the website's approve page User Id, Static Image, Animated Image, Approved Status, Token POST /ReqUser Not In Use The endpoint used to retrieve individual users by their Id, currently not in use by any existing components. User Id GET /ReqAll Website The endpoint used to retrieve individual users by their Id, currently not in use by any existing components. No Params GET /Oauth2 Discord The endpoint used by the pending settings menu option for setting profile pictures, this is the authorization aspect of the menu (prevents user Id spoofing). runs through the Discord Oauth2 system. This endpoint is meant to be paired with the /AddUserBTN endpoint. No Params POST Endpoints - Details & Examples /AddUser POST This endpoint is used by the Discord bot to make the initial request to the database. This is hosted on the Repl.it for the Api and is stored in Json formatting. Requests are taken from this initial database in other actions and the website is built upon this. This endpoint uses a modified user object with an added token that is stored in the bot as an environment variable. Example: url = 'https://APFP-JS-API.p0rtl.repl.co/AddUser' data = {'userId':UserID, 'staticImage':IMG_Static, 'animatedImage':IMG_Playing, 'TOKEN':RQTOKEN} headers = {'Auth': \"Token\"} requests.post(url, data = data, headers = headers) Note: Token is deprecated for future use in the request body. /AddUserBTN POST This endpoint will be used in the future for the settings menu option of setting a profile picture. This functions in the same way as the primary /AddUser endpoint, with authorization being handled differently. This endpoint is to be used in conjuction with the /Oauth2 endpoint for authorization, due to this it uses the basic user object. Example: url = 'https://APFP-JS-API.p0rtl.repl.co/AddUserBTN' data = {'userId':UserID, 'staticImage':IMG_Static, 'animatedImage':IMG_Playing} requests.post(url, data = data) /EditUsers POST This endpoint is used by the website for approving and pushing users to the final database hosted on the Github repository for APFP. This endpoint triggers an update of the approved status for each user. It also triggers the api to compile the Json database to css for use in the plugin. This is the css that is finally pushed to the repo. This endpoint uses a modified user object with an additional item for approve status. Example: url = 'https://APFP-JS-API.p0rtl.repl.co/EditUsers' data = {'userId':UserID, 'staticImage':IMG_Static, 'animatedImage':IMG_Playing, 'Approved':ApprovedStatus} requests.post(url, data = data) The approved status is based on a number system: 0 - Pending 1 - Approved 2 - Denied /ReqUser GET This endpoint is used to retrieve a single user by their Id. This will return the modified user object that includes the approve status. This is not currently used in any components of the APFP system. Example: url = 'https://APFP-JS-API.p0rtl.repl.co/ReqUser' data = {'userId':UserID} requests.get(url, data = data) /ReqAll GET This endpoint is the alternative to /ReqUser, it returns all of the users stored in the Repl.it database. It will return the data as user objects . Example: url = 'https://APFP-JS-API.p0rtl.repl.co/ReqAll' requests.get(url) /Oauth2 POST Under Construction","title":"API"},{"location":"API/#api","text":"","title":"API"},{"location":"API/#written-in-node-js","text":"","title":"Written in Node Js"},{"location":"API/#basics-http-requests","text":"Method Action GET Requests a representation of the specified resource POST Used to submit an entity to the specified resource Descriptions provided courtesy of MDN","title":"Basics - HTTP Requests"},{"location":"API/#the-user-object","text":"The user object is the main data that is being transferred in this Api, you will be using this a lot. The base object is formatted as shown in the following code block: {'userId':UserID, 'staticImage':IMG_Static, 'animatedImage':IMG_Playing} Note: There are certain endpoints that require a modified user object, but they will always contain these base items.","title":"The User Object"},{"location":"API/#endpoints-overview","text":"URL Description Params Type /AddUser Bot The endpoint used to create user entries into the database, these requests await approval before being commited. This endpoint is used by the Discord bot User Id, Static Image, Animated Image, Token POST /AddUserBTN Discord The endpoint used to create user entries into the database, these requests await approval before being commited. This endpoint is pending use in the settings menu of Discord. User Id, Static Image, Animated Image POST /EditUsers Website The endpoint used to approve and commit users to the database, this is triggered by the website's approve page User Id, Static Image, Animated Image, Approved Status, Token POST /ReqUser Not In Use The endpoint used to retrieve individual users by their Id, currently not in use by any existing components. User Id GET /ReqAll Website The endpoint used to retrieve individual users by their Id, currently not in use by any existing components. No Params GET /Oauth2 Discord The endpoint used by the pending settings menu option for setting profile pictures, this is the authorization aspect of the menu (prevents user Id spoofing). runs through the Discord Oauth2 system. This endpoint is meant to be paired with the /AddUserBTN endpoint. No Params POST","title":"Endpoints - Overview"},{"location":"API/#endpoints-details-examples","text":"","title":"Endpoints - Details &amp; Examples"},{"location":"API/#adduser-post","text":"This endpoint is used by the Discord bot to make the initial request to the database. This is hosted on the Repl.it for the Api and is stored in Json formatting. Requests are taken from this initial database in other actions and the website is built upon this. This endpoint uses a modified user object with an added token that is stored in the bot as an environment variable. Example: url = 'https://APFP-JS-API.p0rtl.repl.co/AddUser' data = {'userId':UserID, 'staticImage':IMG_Static, 'animatedImage':IMG_Playing, 'TOKEN':RQTOKEN} headers = {'Auth': \"Token\"} requests.post(url, data = data, headers = headers) Note: Token is deprecated for future use in the request body.","title":"/AddUser POST"},{"location":"API/#adduserbtn-post","text":"This endpoint will be used in the future for the settings menu option of setting a profile picture. This functions in the same way as the primary /AddUser endpoint, with authorization being handled differently. This endpoint is to be used in conjuction with the /Oauth2 endpoint for authorization, due to this it uses the basic user object. Example: url = 'https://APFP-JS-API.p0rtl.repl.co/AddUserBTN' data = {'userId':UserID, 'staticImage':IMG_Static, 'animatedImage':IMG_Playing} requests.post(url, data = data)","title":"/AddUserBTN POST"},{"location":"API/#editusers-post","text":"This endpoint is used by the website for approving and pushing users to the final database hosted on the Github repository for APFP. This endpoint triggers an update of the approved status for each user. It also triggers the api to compile the Json database to css for use in the plugin. This is the css that is finally pushed to the repo. This endpoint uses a modified user object with an additional item for approve status. Example: url = 'https://APFP-JS-API.p0rtl.repl.co/EditUsers' data = {'userId':UserID, 'staticImage':IMG_Static, 'animatedImage':IMG_Playing, 'Approved':ApprovedStatus} requests.post(url, data = data) The approved status is based on a number system: 0 - Pending 1 - Approved 2 - Denied","title":"/EditUsers POST"},{"location":"API/#requser-get","text":"This endpoint is used to retrieve a single user by their Id. This will return the modified user object that includes the approve status. This is not currently used in any components of the APFP system. Example: url = 'https://APFP-JS-API.p0rtl.repl.co/ReqUser' data = {'userId':UserID} requests.get(url, data = data)","title":"/ReqUser GET"},{"location":"API/#reqall-get","text":"This endpoint is the alternative to /ReqUser, it returns all of the users stored in the Repl.it database. It will return the data as user objects . Example: url = 'https://APFP-JS-API.p0rtl.repl.co/ReqAll' requests.get(url)","title":"/ReqAll GET"},{"location":"API/#oauth2-post","text":"Under Construction","title":"/Oauth2 POST"},{"location":"Bot/","text":"Under Construction","title":"Bot"},{"location":"Bot/#under-construction","text":"","title":"Under Construction"},{"location":"Discord/","text":"Under Construction","title":"Discord"},{"location":"Discord/#under-construction","text":"","title":"Under Construction"},{"location":"Github/","text":"Under Construction","title":"Github"},{"location":"Github/#under-construction","text":"","title":"Under Construction"},{"location":"Website/","text":"Under Construction","title":"Website"},{"location":"Website/#under-construction","text":"","title":"Under Construction"}]}